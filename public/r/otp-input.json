{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input",
  "type": "registry:ui",
  "title": "OTP Input",
  "description": "Windows 95 styled OTP input component",
  "dependencies": [
    "input-otp"
  ],
  "files": [
    {
      "path": "components/97cn/otp-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface OTPInputProps extends React.HTMLAttributes<HTMLDivElement> {\n  value?: string\n  onChange?: (value: string) => void\n  length?: number\n  disabled?: boolean\n}\n\nconst OTPInput = React.forwardRef<HTMLDivElement, OTPInputProps>(\n  ({ className, value = \"\", onChange, length = 6, disabled, ...props }, ref) => {\n    const [internalValue, setInternalValue] = React.useState(value)\n    const inputRefs = React.useRef<(HTMLInputElement | null)[]>([])\n\n    React.useEffect(() => {\n      setInternalValue(value)\n    }, [value])\n\n    const handleChange = (index: number, newValue: string) => {\n      if (newValue.length > 1) {\n        // Handle paste\n        const pastedValue = newValue.slice(0, length)\n        setInternalValue(pastedValue)\n        onChange?.(pastedValue)\n\n        // Focus the last filled input or the next empty one\n        const nextIndex = Math.min(pastedValue.length, length - 1)\n        inputRefs.current[nextIndex]?.focus()\n        return\n      }\n\n      const newOTP = internalValue.split(\"\")\n      newOTP[index] = newValue\n      const result = newOTP.join(\"\").slice(0, length)\n\n      setInternalValue(result)\n      onChange?.(result)\n\n      // Move to next input if value was entered\n      if (newValue && index < length - 1) {\n        inputRefs.current[index + 1]?.focus()\n      }\n    }\n\n    const handleKeyDown = (index: number, e: React.KeyboardEvent) => {\n      if (e.key === \"Backspace\" && !internalValue[index] && index > 0) {\n        inputRefs.current[index - 1]?.focus()\n      }\n      if (e.key === \"ArrowLeft\" && index > 0) {\n        inputRefs.current[index - 1]?.focus()\n      }\n      if (e.key === \"ArrowRight\" && index < length - 1) {\n        inputRefs.current[index + 1]?.focus()\n      }\n    }\n\n    return (\n      <div ref={ref} className={cn(\"flex gap-2\", className)} {...props}>\n        {Array.from({ length }, (_, index) => (\n          <input\n            key={index}\n            ref={(el) => (inputRefs.current[index] = el)}\n            type=\"text\"\n            inputMode=\"numeric\"\n            pattern=\"[0-9]*\"\n            maxLength={1}\n            value={internalValue[index] || \"\"}\n            onChange={(e) => handleChange(index, e.target.value)}\n            onKeyDown={(e) => handleKeyDown(index, e)}\n            disabled={disabled}\n            className={cn(\n              \"w-10 h-10 text-center text-xs font-mono\",\n              \"win95-sunken bg-win95-white border-2 text-win95-black rounded-none\",\n              \"focus:outline-none focus:outline-1 focus:outline-dotted focus:outline-win95-black focus:outline-offset-[-3px]\",\n              \"disabled:bg-win95-button-face disabled:text-win95-dark-gray\",\n              className,\n            )}\n          />\n        ))}\n      </div>\n    )\n  },\n)\nOTPInput.displayName = \"OTPInput\"\n\nexport { OTPInput }\n",
      "type": "registry:ui"
    }
  ],
  "cssVars": {
    "light": {
      "win95-white": "#ffffff",
      "win95-black": "#000000",
      "win95-button-shadow": "#808080",
      "win95-button-highlight": "#ffffff"
    },
    "dark": {
      "win95-white": "#ffffff",
      "win95-black": "#000000",
      "win95-button-shadow": "#808080",
      "win95-button-highlight": "#ffffff"
    }
  },
  "css": {
    "@layer utilities": {
      ".win95-sunken": {
        "border-top": "2px solid var(--win95-button-shadow)",
        "border-left": "2px solid var(--win95-button-shadow)",
        "border-right": "2px solid var(--win95-button-highlight)",
        "border-bottom": "2px solid var(--win95-button-highlight)"
      }
    }
  }
}